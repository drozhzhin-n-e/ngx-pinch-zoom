{"ast":null,"code":"export class Touches {\n  constructor(properties) {\n    this.eventType = undefined;\n    this.handlers = {};\n    this.startX = 0;\n    this.startY = 0;\n    this.lastTap = 0;\n    this.doubleTapMinTimeout = 300;\n    this.tapMinTimeout = 200;\n    this.touchstartTime = 0;\n    this.i = 0;\n    this.isMousedown = false;\n    this._touchListeners = {\n      \"touchstart\": \"handleTouchstart\",\n      \"touchmove\": \"handleTouchmove\",\n      \"touchend\": \"handleTouchend\"\n    };\n    this._mouseListeners = {\n      \"mousedown\": \"handleMousedown\",\n      \"mousemove\": \"handleMousemove\",\n      \"mouseup\": \"handleMouseup\",\n      \"wheel\": \"handleWheel\"\n    };\n    this._otherListeners = {\n      \"resize\": \"handleResize\"\n    };\n    /*\r\n     * Listeners\r\n     */\n    /* Touchstart */\n    this.handleTouchstart = event => {\n      this.elementPosition = this.getElementPosition();\n      this.touchstartTime = new Date().getTime();\n      if (this.eventType === undefined) {\n        this.getTouchstartPosition(event);\n      }\n      this.runHandler(\"touchstart\", event);\n    };\n    /* Touchmove */\n    this.handleTouchmove = event => {\n      const touches = event.touches;\n      // Pan\n      if (this.detectPan(touches)) {\n        this.runHandler(\"pan\", event);\n      }\n      // Pinch\n      if (this.detectPinch(event)) {\n        this.runHandler(\"pinch\", event);\n      }\n    };\n    /* Touchend */\n    this.handleTouchend = event => {\n      const touches = event.touches;\n      // Double Tap\n      if (this.detectDoubleTap()) {\n        this.runHandler(\"double-tap\", event);\n      }\n      // Tap\n      this.detectTap();\n      this.runHandler(\"touchend\", event);\n      this.eventType = 'touchend';\n      if (touches && touches.length === 0) {\n        this.eventType = undefined;\n        this.i = 0;\n      }\n    };\n    /* Mousedown */\n    this.handleMousedown = event => {\n      this.isMousedown = true;\n      this.elementPosition = this.getElementPosition();\n      this.touchstartTime = new Date().getTime();\n      if (this.eventType === undefined) {\n        this.getMousedownPosition(event);\n      }\n      this.runHandler(\"mousedown\", event);\n    };\n    /* Mousemove */\n    this.handleMousemove = event => {\n      //event.preventDefault();\n      if (!this.isMousedown) {\n        return;\n      }\n      // Pan\n      this.runHandler(\"pan\", event);\n      // Linear swipe\n      switch (this.detectLinearSwipe(event)) {\n        case \"horizontal-swipe\":\n          event.swipeType = \"horizontal-swipe\";\n          this.runHandler(\"horizontal-swipe\", event);\n          break;\n        case \"vertical-swipe\":\n          event.swipeType = \"vertical-swipe\";\n          this.runHandler(\"vertical-swipe\", event);\n          break;\n      }\n      // Linear swipe\n      if (this.detectLinearSwipe(event) || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n        this.handleLinearSwipe(event);\n      }\n    };\n    /* Mouseup */\n    this.handleMouseup = event => {\n      // Tap\n      this.detectTap();\n      this.isMousedown = false;\n      this.runHandler(\"mouseup\", event);\n      this.eventType = undefined;\n      this.i = 0;\n    };\n    /* Wheel */\n    this.handleWheel = event => {\n      this.runHandler(\"wheel\", event);\n    };\n    /* Resize */\n    this.handleResize = event => {\n      this.runHandler(\"resize\", event);\n    };\n    this.properties = properties;\n    this.element = this.properties.element;\n    this.elementPosition = this.getElementPosition();\n    this.toggleEventListeners('addEventListener');\n  }\n  get touchListeners() {\n    return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\n  }\n  get mouseListeners() {\n    return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\n  }\n  get otherListeners() {\n    return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\n  }\n  destroy() {\n    this.toggleEventListeners('removeEventListener');\n  }\n  toggleEventListeners(action) {\n    let listeners;\n    if (this.properties.listeners === 'mouse and touch') {\n      listeners = Object.assign(this.touchListeners, this.mouseListeners);\n    } else {\n      listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\n    }\n    if (this.properties.resize) {\n      listeners = Object.assign(listeners, this.otherListeners);\n    }\n    for (var listener in listeners) {\n      const handler = listeners[listener];\n      // Window\n      if (listener === \"resize\") {\n        if (action === 'addEventListener') {\n          window.addEventListener(listener, this[handler], false);\n        }\n        if (action === 'removeEventListener') {\n          window.removeEventListener(listener, this[handler], false);\n        }\n        // Document\n      } else if (listener === 'mouseup' || listener === \"mousemove\") {\n        if (action === 'addEventListener') {\n          document.addEventListener(listener, this[handler], false);\n        }\n        if (action === 'removeEventListener') {\n          document.removeEventListener(listener, this[handler], false);\n        }\n        // Element\n      } else {\n        if (action === 'addEventListener') {\n          this.element.addEventListener(listener, this[handler], false);\n        }\n        if (action === 'removeEventListener') {\n          this.element.removeEventListener(listener, this[handler], false);\n        }\n      }\n    }\n  }\n  addEventListeners(listener) {\n    const handler = this._mouseListeners[listener];\n    window.addEventListener(listener, this[handler], false);\n  }\n  removeEventListeners(listener) {\n    const handler = this._mouseListeners[listener];\n    window.removeEventListener(listener, this[handler], false);\n  }\n  handleLinearSwipe(event) {\n    //event.preventDefault();\n    this.i++;\n    if (this.i > 3) {\n      this.eventType = this.getLinearSwipeType(event);\n    }\n    if (this.eventType === 'horizontal-swipe') {\n      this.runHandler('horizontal-swipe', event);\n    }\n    if (this.eventType === 'vertical-swipe') {\n      this.runHandler('vertical-swipe', event);\n    }\n  }\n  runHandler(eventName, response) {\n    if (this.handlers[eventName]) {\n      this.handlers[eventName](response);\n    }\n  }\n  /*\r\n   * Detection\r\n   */\n  detectPan(touches) {\n    return touches.length === 1 && !this.eventType || this.eventType === 'pan';\n  }\n  detectDoubleTap() {\n    if (this.eventType != undefined) {\n      return;\n    }\n    const currentTime = new Date().getTime();\n    const tapLength = currentTime - this.lastTap;\n    clearTimeout(this.doubleTapTimeout);\n    if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\n      return true;\n    } else {\n      this.doubleTapTimeout = setTimeout(() => {\n        clearTimeout(this.doubleTapTimeout);\n      }, this.doubleTapMinTimeout);\n    }\n    this.lastTap = currentTime;\n    return undefined;\n  }\n  detectTap() {\n    if (this.eventType != undefined) {\n      return;\n    }\n    const currentTime = new Date().getTime();\n    const tapLength = currentTime - this.touchstartTime;\n    if (tapLength > 0) {\n      if (tapLength < this.tapMinTimeout) {\n        this.runHandler(\"tap\", {});\n      } else {\n        this.runHandler(\"longtap\", {});\n      }\n    }\n  }\n  detectPinch(event) {\n    const touches = event.touches;\n    return touches.length === 2 && this.eventType === undefined || this.eventType === 'pinch';\n  }\n  detectLinearSwipe(event) {\n    const touches = event.touches;\n    if (touches) {\n      if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n        return this.getLinearSwipeType(event);\n      }\n    } else {\n      if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n        return this.getLinearSwipeType(event);\n      }\n    }\n    return undefined;\n  }\n  getLinearSwipeType(event) {\n    if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\n      const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\n      const movementY = Math.abs(this.moveTop(0, event) - this.startY);\n      if (movementY * 3 > movementX) {\n        return 'vertical-swipe';\n      } else {\n        return 'horizontal-swipe';\n      }\n    } else {\n      return this.eventType;\n    }\n  }\n  getElementPosition() {\n    return this.element.getBoundingClientRect();\n  }\n  getTouchstartPosition(event) {\n    this.startX = event.touches[0].clientX - this.elementPosition.left;\n    this.startY = event.touches[0].clientY - this.elementPosition.top;\n  }\n  getMousedownPosition(event) {\n    this.startX = event.clientX - this.elementPosition.left;\n    this.startY = event.clientY - this.elementPosition.top;\n  }\n  moveLeft(index, event) {\n    const touches = event.touches;\n    if (touches) {\n      return touches[index].clientX - this.elementPosition.left;\n    } else {\n      return event.clientX - this.elementPosition.left;\n    }\n  }\n  moveTop(index, event) {\n    const touches = event.touches;\n    if (touches) {\n      return touches[index].clientY - this.elementPosition.top;\n    } else {\n      return event.clientY - this.elementPosition.top;\n    }\n  }\n  detectTouchScreen() {\n    var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n    var mq = function (query) {\n      return window.matchMedia(query).matches;\n    };\n    if ('ontouchstart' in window) {\n      return true;\n    }\n    // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n    // https://git.io/vznFH\n    var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\n    return mq(query);\n  }\n  /* Public properties and methods */\n  on(event, handler) {\n    if (event) {\n      this.handlers[event] = handler;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Touches","constructor","properties","undefined","event","elementPosition","getElementPosition","touchstartTime","Date","getTime","eventType","getTouchstartPosition","runHandler","touches","detectPan","detectPinch","detectDoubleTap","detectTap","length","i","isMousedown","getMousedownPosition","detectLinearSwipe","swipeType","handleLinearSwipe","element","toggleEventListeners","touchListeners","_touchListeners","mouseListeners","_mouseListeners","otherListeners","_otherListeners","destroy","action","listeners","Object","assign","detectTouchScreen","resize","listener","handler","window","addEventListener","removeEventListener","document","addEventListeners","removeEventListeners","getLinearSwipeType","eventName","response","handlers","currentTime","tapLength","lastTap","clearTimeout","doubleTapTimeout","doubleTapMinTimeout","setTimeout","tapMinTimeout","movementX","Math","abs","moveLeft","startX","movementY","moveTop","startY","getBoundingClientRect","clientX","left","clientY","top","index","prefixes","split","mq","query","matchMedia","matches","join","on"],"sourceRoot":"","sources":["C:\\MobileApp\\ngx-pinch-zoom\\projects\\ngx-pinch-zoom\\src\\lib\\touches.ts"],"sourcesContent":["export interface Properties {\r\n    element: HTMLElement;\r\n    listeners?: 'auto' | 'mouse and touch';\r\n    touchListeners?: any;\r\n    mouseListeners?: any;\r\n    otherListeners?: any;\r\n    resize?: boolean;\r\n}\r\n\r\nexport type EventType = undefined | 'touchend' | 'pan' | 'pinch' | 'horizontal-swipe' | 'vertical-swipe' | 'tap' | 'longtap';\r\nexport type TouchHandler = 'handleTouchstart' | 'handleTouchmove' | 'handleTouchend';\r\nexport type MouseHandler = 'handleMousedown' | 'handleMousemove' | 'handleMouseup';\r\n\r\nexport class Touches {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    elementPosition: ClientRect;\r\n    eventType: EventType = undefined;\r\n    handlers: any = {};\r\n    startX = 0;\r\n    startY = 0;\r\n    lastTap = 0;\r\n    doubleTapTimeout: any;\r\n    doubleTapMinTimeout = 300;\r\n    tapMinTimeout = 200;\r\n    touchstartTime = 0;\r\n    i: number = 0;\r\n    isMousedown = false;\r\n\r\n    _touchListeners: any = {\r\n        \"touchstart\": \"handleTouchstart\",\r\n        \"touchmove\": \"handleTouchmove\",\r\n        \"touchend\": \"handleTouchend\"\r\n    }\r\n    _mouseListeners: any = {\r\n        \"mousedown\": \"handleMousedown\",\r\n        \"mousemove\": \"handleMousemove\",\r\n        \"mouseup\": \"handleMouseup\",\r\n        \"wheel\": \"handleWheel\"\r\n    }\r\n    _otherListeners: any = {\r\n        \"resize\": \"handleResize\"\r\n    }\r\n\r\n    get touchListeners() {\r\n        return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\r\n    }\r\n\r\n    get mouseListeners() {\r\n        return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\r\n    }\r\n\r\n    get otherListeners() {\r\n        return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.properties = properties;\r\n        this.element = this.properties.element;\r\n        this.elementPosition = this.getElementPosition();\r\n\r\n        this.toggleEventListeners('addEventListener');\r\n    }\r\n\r\n    destroy() {\r\n        this.toggleEventListeners('removeEventListener');\r\n    }\r\n\r\n    toggleEventListeners(action: 'addEventListener' | 'removeEventListener') {\r\n        let listeners;\r\n\r\n        if (this.properties.listeners === 'mouse and touch') {\r\n            listeners = Object.assign(this.touchListeners, this.mouseListeners);\r\n        } else {\r\n            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\r\n        }\r\n\r\n        if (this.properties.resize) {\r\n            listeners = Object.assign(listeners, this.otherListeners);\r\n        }\r\n\r\n        for (var listener in listeners) {\r\n            const handler: MouseHandler = listeners[listener];\r\n\r\n            // Window\r\n            if (listener === \"resize\") {\r\n                if (action === 'addEventListener') {\r\n                    window.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    window.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Document\r\n            } else if (listener === 'mouseup' || listener === \"mousemove\") {\r\n                if (action === 'addEventListener') {\r\n                    document.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    document.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Element\r\n            } else {\r\n                if (action === 'addEventListener') {\r\n                    this.element.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    this.element.removeEventListener(listener, this[handler], false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListeners(listener: string) {\r\n        const handler: MouseHandler = this._mouseListeners[listener];\r\n        window.addEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    removeEventListeners(listener: string) {\r\n        const handler: MouseHandler = this._mouseListeners[listener];\r\n        window.removeEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    /*\r\n     * Listeners\r\n     */\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"touchstart\", event);\r\n    }\r\n\r\n\r\n    /* Touchmove */\r\n\r\n    handleTouchmove = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Pan\r\n        if (this.detectPan(touches)) {\r\n            this.runHandler(\"pan\", event);\r\n        }\r\n\r\n        // Pinch\r\n        if (this.detectPinch(event)) {\r\n            this.runHandler(\"pinch\", event);\r\n        }\r\n    }\r\n\r\n    handleLinearSwipe(event: any) {\r\n        //event.preventDefault();\r\n\r\n        this.i++;\r\n\r\n        if (this.i > 3) {\r\n            this.eventType = this.getLinearSwipeType(event);\r\n        }\r\n\r\n        if (this.eventType === 'horizontal-swipe') {\r\n            this.runHandler('horizontal-swipe', event);\r\n        }\r\n\r\n        if (this.eventType === 'vertical-swipe') {\r\n            this.runHandler('vertical-swipe', event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Double Tap\r\n        if (this.detectDoubleTap()) {\r\n            this.runHandler(\"double-tap\", event);\r\n        }\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.runHandler(\"touchend\", event);\r\n        this.eventType = 'touchend';\r\n\r\n        if (touches && touches.length === 0) {\r\n            this.eventType = undefined;\r\n            this.i = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* Mousedown */\r\n\r\n    handleMousedown = (event: any) => {\r\n        this.isMousedown = true;\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getMousedownPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"mousedown\", event);\r\n    }\r\n\r\n\r\n    /* Mousemove */\r\n\r\n    handleMousemove = (event: any) => {\r\n        //event.preventDefault();\r\n        \r\n        if (!this.isMousedown) {\r\n            return;\r\n        }\r\n\r\n        // Pan\r\n        this.runHandler(\"pan\", event);\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Mouseup */\r\n\r\n    handleMouseup = (event: any) => {\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.isMousedown = false;\r\n        this.runHandler(\"mouseup\", event);\r\n        this.eventType = undefined;\r\n        this.i = 0;\r\n    }\r\n\r\n\r\n    /* Wheel */\r\n\r\n    handleWheel = (event: any) => {\r\n        this.runHandler(\"wheel\", event);\r\n    }\r\n\r\n    /* Resize */\r\n\r\n    handleResize = (event: any) => {\r\n        this.runHandler(\"resize\", event);\r\n    }\r\n\r\n    runHandler(eventName: any, response: any) {\r\n        if (this.handlers[eventName]) {\r\n            this.handlers[eventName](response);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    detectPan(touches: any) {\r\n        return touches.length === 1 && !this.eventType || this.eventType === 'pan';\r\n    }\r\n\r\n    detectDoubleTap() {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.lastTap;\r\n\r\n        clearTimeout(this.doubleTapTimeout);\r\n\r\n        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\r\n            return true;\r\n        } else {\r\n            this.doubleTapTimeout = setTimeout(() => {\r\n                clearTimeout(this.doubleTapTimeout);\r\n            }, this.doubleTapMinTimeout);\r\n        }\r\n        this.lastTap = currentTime;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    detectTap(): void {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.touchstartTime;\r\n\r\n        if (tapLength > 0) {\r\n            if (tapLength < this.tapMinTimeout) {\r\n                this.runHandler(\"tap\", {});\r\n            } else {\r\n                this.runHandler(\"longtap\", {});\r\n            }\r\n        }\r\n    }\r\n\r\n    detectPinch(event: any) {\r\n        const touches = event.touches;\r\n        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';\r\n    }\r\n\r\n    detectLinearSwipe(event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        } else {\r\n            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getLinearSwipeType(event: any) {\r\n        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\r\n            const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\r\n            const movementY = Math.abs(this.moveTop(0, event) - this.startY);\r\n\r\n            if ((movementY * 3) > movementX) {\r\n                return 'vertical-swipe';\r\n            } else {\r\n                return 'horizontal-swipe';\r\n            }\r\n        } else {\r\n            return this.eventType;\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        this.startX = event.touches[0].clientX - this.elementPosition.left;\r\n        this.startY = event.touches[0].clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getMousedownPosition(event: any) {\r\n        this.startX = event.clientX - this.elementPosition.left;\r\n        this.startY = event.clientY - this.elementPosition.top;\r\n    }\r\n\r\n    moveLeft(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientX - this.elementPosition.left;\r\n        } else {\r\n            return event.clientX - this.elementPosition.left;\r\n        }\r\n    }\r\n\r\n    moveTop(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientY - this.elementPosition.top;\r\n        } else {\r\n            return event.clientY - this.elementPosition.top;\r\n        }\r\n    }\r\n\r\n    detectTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query: any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n\r\n    /* Public properties and methods */\r\n    on(event: EventType, handler: Function) {\r\n        if (event) {\r\n            this.handlers[event] = handler;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}