{"ast":null,"code":"import { Touches } from './touches';\nimport { defaultProperties } from './properties';\nexport class IvyPinch {\n  constructor(properties) {\n    this.properties = defaultProperties;\n    this.i = 0;\n    this.scale = 1;\n    this.initialScale = 1;\n    this.startX = 0;\n    this.startY = 0;\n    this.moveX = 0;\n    this.moveY = 0;\n    this.initialMoveX = 0;\n    this.initialMoveY = 0;\n    this.moveXC = 0;\n    this.moveYC = 0;\n    this.lastTap = 0;\n    this.draggingMode = false;\n    this.distance = 0;\n    this.doubleTapTimeout = 0;\n    this.initialDistance = 0;\n    this.events = {};\n    this.defaultMaxScale = 3;\n    /* Touchstart */\n    this.handleTouchstart = event => {\n      this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\n      this.getElementPosition();\n      if (this.eventType === undefined) {\n        this.getTouchstartPosition(event);\n      }\n    };\n    /* Touchend */\n    this.handleTouchend = event => {\n      /* touchend */\n      if (event.type === \"touchend\") {\n        this.i = 0;\n        this.draggingMode = false;\n        const touches = event.touches;\n        // Min scale\n        if (this.scale < 1) {\n          this.scale = 1;\n        }\n        // Auto Zoom Out\n        if (this.properties.autoZoomOut && this.eventType === 'pinch') {\n          this.scale = 1;\n        }\n        // Align image\n        if (this.eventType === 'pinch' || this.eventType === 'pan' && this.scale > this.minPanScale) {\n          this.alignImage();\n        }\n        // Update initial values\n        if (this.eventType === 'pinch' || this.eventType === 'pan' || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n          this.updateInitialValues();\n        }\n        this.eventType = 'touchend';\n        if (touches && touches.length === 0) {\n          this.eventType = undefined;\n        }\n      }\n      /* mouseup */\n      if (event.type === \"mouseup\") {\n        this.draggingMode = false;\n        this.updateInitialValues();\n        this.eventType = undefined;\n      }\n      this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\n    };\n    /*\r\n     * Handlers\r\n     */\n    this.handlePan = event => {\n      if (this.scale < this.minPanScale || this.properties.disablePan) {\n        return;\n      }\n      event.preventDefault();\n      const {\n        clientX,\n        clientY\n      } = this.getClientPosition(event);\n      if (!this.eventType) {\n        this.startX = clientX - this.elementPosition.left;\n        this.startY = clientY - this.elementPosition.top;\n      }\n      this.eventType = 'pan';\n      this.moveX = this.initialMoveX + (this.moveLeft(event, 0) - this.startX);\n      this.moveY = this.initialMoveY + (this.moveTop(event, 0) - this.startY);\n      if (this.properties.limitPan) {\n        this.limitPanY();\n        this.limitPanX();\n      }\n      /* mousemove */\n      if (event.type === \"mousemove\" && this.scale > this.minPanScale) {\n        this.centeringImage();\n      }\n      this.transformElement(0);\n    };\n    this.handleDoubleTap = event => {\n      this.toggleZoom(event);\n      return;\n    };\n    this.handlePinch = event => {\n      event.preventDefault();\n      if (this.eventType === undefined || this.eventType === 'pinch') {\n        const touches = event.touches;\n        if (!this.eventType) {\n          this.initialDistance = this.getDistance(touches);\n          const moveLeft0 = this.moveLeft(event, 0);\n          const moveLeft1 = this.moveLeft(event, 1);\n          const moveTop0 = this.moveTop(event, 0);\n          const moveTop1 = this.moveTop(event, 1);\n          this.moveXC = (moveLeft0 + moveLeft1) / 2 - this.initialMoveX;\n          this.moveYC = (moveTop0 + moveTop1) / 2 - this.initialMoveY;\n        }\n        this.eventType = 'pinch';\n        this.distance = this.getDistance(touches);\n        this.scale = this.initialScale * (this.distance / this.initialDistance);\n        this.moveX = this.initialMoveX - (this.distance / this.initialDistance * this.moveXC - this.moveXC);\n        this.moveY = this.initialMoveY - (this.distance / this.initialDistance * this.moveYC - this.moveYC);\n        this.handleLimitZoom();\n        if (this.properties.limitPan) {\n          this.limitPanY();\n          this.limitPanX();\n        }\n        this.transformElement(0);\n      }\n    };\n    this.handleWheel = event => {\n      event.preventDefault();\n      let wheelZoomFactor = this.properties.wheelZoomFactor || 0;\n      let zoomFactor = event.deltaY < 0 ? wheelZoomFactor : -wheelZoomFactor;\n      let newScale = this.initialScale + zoomFactor;\n      /* Round value */\n      if (newScale < 1 + wheelZoomFactor) {\n        newScale = 1;\n      } else if (newScale < this.maxScale && newScale > this.maxScale - wheelZoomFactor) {\n        newScale = this.maxScale;\n      }\n      if (newScale < 1 || newScale > this.maxScale) {\n        return;\n      }\n      if (newScale === this.scale) {\n        return;\n      }\n      this.getElementPosition();\n      this.scale = newScale;\n      /* Get cursor position over image */\n      let xCenter = event.clientX - this.elementPosition.left - this.initialMoveX;\n      let yCenter = event.clientY - this.elementPosition.top - this.initialMoveY;\n      this.setZoom({\n        scale: newScale,\n        center: [xCenter, yCenter]\n      });\n    };\n    this.handleResize = _event => {\n      this.setAutoHeight();\n    };\n    this.element = properties.element;\n    if (!this.element) {\n      return;\n    }\n    this.elementTarget = this.element.querySelector('*').tagName;\n    this.parentElement = this.element.parentElement;\n    this.properties = Object.assign({}, defaultProperties, properties);\n    this.detectLimitZoom();\n    this.touches = new Touches({\n      element: properties.element,\n      listeners: properties.listeners,\n      resize: properties.autoHeight,\n      mouseListeners: {\n        \"mousedown\": \"handleMousedown\",\n        \"mouseup\": \"handleMouseup\",\n        \"wheel\": \"handleWheel\"\n      }\n    });\n    /* Init */\n    this.setBasicStyles();\n    /*\r\n     * Listeners\r\n     */\n    this.touches.on('touchstart', this.handleTouchstart);\n    this.touches.on('touchend', this.handleTouchend);\n    this.touches.on('mousedown', this.handleTouchstart);\n    this.touches.on('mouseup', this.handleTouchend);\n    this.touches.on('pan', this.handlePan);\n    this.touches.on('mousemove', this.handlePan);\n    this.touches.on('pinch', this.handlePinch);\n    if (this.properties.wheel) {\n      this.touches.on('wheel', this.handleWheel);\n    }\n    if (this.properties.doubleTap) {\n      this.touches.on('double-tap', this.handleDoubleTap);\n    }\n    if (this.properties.autoHeight) {\n      this.touches.on('resize', this.handleResize);\n    }\n  }\n  // Minimum scale at which panning works\n  get minPanScale() {\n    return this.getPropertiesValue(\"minPanScale\");\n  }\n  get fullImage() {\n    return this.properties.fullImage;\n  }\n  handleLimitZoom() {\n    const limitZoom = this.maxScale;\n    const minScale = this.properties.minScale || 0;\n    if (this.scale > limitZoom || this.scale <= minScale) {\n      const imageWidth = this.getImageWidth();\n      const imageHeight = this.getImageHeight();\n      const enlargedImageWidth = imageWidth * this.scale;\n      const enlargedImageHeight = imageHeight * this.scale;\n      const moveXRatio = this.moveX / (enlargedImageWidth - imageWidth);\n      const moveYRatio = this.moveY / (enlargedImageHeight - imageHeight);\n      if (this.scale > limitZoom) {\n        this.scale = limitZoom;\n      }\n      if (this.scale <= minScale) {\n        this.scale = minScale;\n      }\n      const newImageWidth = imageWidth * this.scale;\n      const newImageHeight = imageHeight * this.scale;\n      this.moveX = -Math.abs(moveXRatio * (newImageWidth - imageWidth));\n      this.moveY = -Math.abs(-moveYRatio * (newImageHeight - imageHeight));\n    }\n  }\n  moveLeft(event, index = 0) {\n    const clientX = this.getClientPosition(event, index).clientX;\n    return clientX - this.elementPosition.left;\n  }\n  moveTop(event, index = 0) {\n    const clientY = this.getClientPosition(event, index).clientY;\n    return clientY - this.elementPosition.top;\n  }\n  /*\r\n   * Detection\r\n   */\n  centeringImage() {\n    const img = this.element.getElementsByTagName(this.elementTarget)[0];\n    const initialMoveX = this.moveX;\n    const initialMoveY = this.moveY;\n    if (this.moveY > 0) {\n      this.moveY = 0;\n    }\n    if (this.moveX > 0) {\n      this.moveX = 0;\n    }\n    if (img) {\n      this.limitPanY();\n      this.limitPanX();\n    }\n    if (img && this.scale < 1) {\n      if (this.moveX < this.element.offsetWidth * (1 - this.scale)) {\n        this.moveX = this.element.offsetWidth * (1 - this.scale);\n      }\n    }\n    return initialMoveX !== this.moveX || initialMoveY !== this.moveY;\n  }\n  limitPanY() {\n    const imgHeight = this.getImageHeight();\n    const scaledImgHeight = imgHeight * this.scale;\n    const parentHeight = this.parentElement.offsetHeight;\n    const elementHeight = this.element.offsetHeight;\n    if (scaledImgHeight < parentHeight) {\n      this.moveY = (parentHeight - elementHeight * this.scale) / 2;\n    } else {\n      const imgOffsetTop = (imgHeight - elementHeight) * this.scale / 2;\n      if (this.moveY > imgOffsetTop) {\n        this.moveY = imgOffsetTop;\n      } else if (scaledImgHeight + Math.abs(imgOffsetTop) - parentHeight + this.moveY < 0) {\n        this.moveY = -(scaledImgHeight + Math.abs(imgOffsetTop) - parentHeight);\n      }\n    }\n  }\n  limitPanX() {\n    const imgWidth = this.getImageWidth();\n    const scaledImgWidth = imgWidth * this.scale;\n    const parentWidth = this.parentElement.offsetWidth;\n    const elementWidth = this.element.offsetWidth;\n    if (scaledImgWidth < parentWidth) {\n      this.moveX = (parentWidth - elementWidth * this.scale) / 2;\n    } else {\n      const imgOffsetLeft = (imgWidth - elementWidth) * this.scale / 2;\n      if (this.moveX > imgOffsetLeft) {\n        this.moveX = imgOffsetLeft;\n      } else if (scaledImgWidth + Math.abs(imgOffsetLeft) - parentWidth + this.moveX < 0) {\n        this.moveX = -(imgWidth * this.scale + Math.abs(imgOffsetLeft) - parentWidth);\n      }\n    }\n  }\n  setBasicStyles() {\n    this.element.style.display = 'flex';\n    this.element.style.alignItems = 'center';\n    this.element.style.justifyContent = 'center';\n    this.element.style.transformOrigin = '0 0';\n    this.setImageSize();\n    this.setDraggableImage();\n  }\n  removeBasicStyles() {\n    this.element.style.display = '';\n    this.element.style.alignItems = '';\n    this.element.style.justifyContent = '';\n    this.element.style.transformOrigin = '';\n    this.removeImageSize();\n    this.removeDraggableImage();\n  }\n  setDraggableImage() {\n    const imgElement = this.getImageElement();\n    if (imgElement) {\n      imgElement.draggable = this.properties.draggableImage;\n    }\n  }\n  removeDraggableImage() {\n    const imgElement = this.getImageElement();\n    if (imgElement) {\n      imgElement.draggable = true;\n    }\n  }\n  setImageSize() {\n    const imgElement = this.element.getElementsByTagName(this.elementTarget);\n    if (imgElement.length) {\n      imgElement[0].style.maxWidth = '100%';\n      imgElement[0].style.maxHeight = '100%';\n      this.setAutoHeight();\n    }\n  }\n  setAutoHeight() {\n    const imgElement = this.element.getElementsByTagName(this.elementTarget);\n    if (!this.properties.autoHeight || !imgElement.length) {\n      return;\n    }\n    const imgNaturalWidth = imgElement[0].getAttribute(\"width\");\n    const imgNaturalHeight = imgElement[0].getAttribute(\"height\");\n    const sizeRatio = imgNaturalWidth / imgNaturalHeight;\n    const parentWidth = this.parentElement.offsetWidth;\n    imgElement[0].style.maxHeight = parentWidth / sizeRatio + \"px\";\n  }\n  removeImageSize() {\n    const imgElement = this.element.getElementsByTagName(this.elementTarget);\n    if (imgElement.length) {\n      imgElement[0].style.maxWidth = '';\n      imgElement[0].style.maxHeight = '';\n    }\n  }\n  getElementPosition() {\n    this.elementPosition = this.element.parentElement.getBoundingClientRect();\n  }\n  getTouchstartPosition(event) {\n    const {\n      clientX,\n      clientY\n    } = this.getClientPosition(event);\n    this.startX = clientX - this.elementPosition.left;\n    this.startY = clientY - this.elementPosition.top;\n  }\n  getClientPosition(event, index = 0) {\n    let clientX;\n    let clientY;\n    if (event.type === \"touchstart\" || event.type === \"touchmove\") {\n      clientX = event.touches[index].clientX;\n      clientY = event.touches[index].clientY;\n    }\n    if (event.type === \"mousedown\" || event.type === \"mousemove\") {\n      clientX = event.clientX;\n      clientY = event.clientY;\n    }\n    return {\n      clientX,\n      clientY\n    };\n  }\n  resetScale() {\n    this.scale = 1;\n    this.moveX = 0;\n    this.moveY = 0;\n    this.updateInitialValues();\n    this.transformElement(this.properties.transitionDuration);\n  }\n  updateInitialValues() {\n    this.initialScale = this.scale;\n    this.initialMoveX = this.moveX;\n    this.initialMoveY = this.moveY;\n  }\n  getDistance(touches) {\n    return Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2));\n  }\n  getImageHeight() {\n    const img = this.element.getElementsByTagName(this.elementTarget)[0];\n    return img.offsetHeight;\n  }\n  getImageWidth() {\n    const img = this.element.getElementsByTagName(this.elementTarget)[0];\n    return img.offsetWidth;\n  }\n  transformElement(duration) {\n    this.element.style.transition = \"all \" + duration + \"ms\";\n    this.element.style.transform = \"matrix(\" + Number(this.scale) + \", 0, 0, \" + Number(this.scale) + \", \" + Number(this.moveX) + \", \" + Number(this.moveY) + \")\";\n  }\n  isTouchScreen() {\n    const prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n    if ('ontouchstart' in window) {\n      return true;\n    }\n    // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n    // https://git.io/vznFH\n    const query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\n    return this.getMatchMedia(query);\n  }\n  getMatchMedia(query) {\n    return window.matchMedia(query).matches;\n  }\n  isDragging() {\n    if (this.properties.disablePan) {\n      return false;\n    }\n    const imgHeight = this.getImageHeight();\n    const imgWidth = this.getImageWidth();\n    if (this.scale > 1) {\n      return imgHeight * this.scale > this.parentElement.offsetHeight || imgWidth * this.scale > this.parentElement.offsetWidth;\n    }\n    if (this.scale === 1) {\n      return imgHeight > this.parentElement.offsetHeight || imgWidth > this.parentElement.offsetWidth;\n    }\n    return undefined;\n  }\n  detectLimitZoom() {\n    this.maxScale = this.defaultMaxScale;\n    if (this.properties.limitZoom === \"original image size\" && this.elementTarget === \"IMG\") {\n      // We are waiting for the element with the image to be available\n      this.pollLimitZoomForOriginalImage();\n    }\n  }\n  pollLimitZoomForOriginalImage() {\n    let poll = setInterval(() => {\n      let maxScaleForOriginalImage = this.getMaxScaleForOriginalImage();\n      if (typeof maxScaleForOriginalImage === 'number') {\n        this.maxScale = maxScaleForOriginalImage;\n        clearInterval(poll);\n      }\n    }, 10);\n  }\n  getMaxScaleForOriginalImage() {\n    let maxScale;\n    let img = this.element.getElementsByTagName(\"img\")[0];\n    if (img.naturalWidth && img.offsetWidth) {\n      maxScale = img.naturalWidth / img.offsetWidth;\n    }\n    return maxScale;\n  }\n  getImageElement() {\n    const imgElement = this.element.getElementsByTagName(this.elementTarget);\n    if (imgElement.length) {\n      return imgElement[0];\n    }\n  }\n  toggleZoom(event = false) {\n    if (this.initialScale === 1) {\n      if (event && event.changedTouches) {\n        if (this.properties.doubleTapScale === undefined) {\n          return;\n        }\n        const changedTouches = event.changedTouches;\n        this.scale = this.initialScale * this.properties.doubleTapScale;\n        this.moveX = this.initialMoveX - (changedTouches[0].clientX - this.elementPosition.left) * (this.properties.doubleTapScale - 1);\n        this.moveY = this.initialMoveY - (changedTouches[0].clientY - this.elementPosition.top) * (this.properties.doubleTapScale - 1);\n      } else {\n        let zoomControlScale = this.properties.zoomControlScale || 0;\n        this.scale = this.initialScale * (zoomControlScale + 1);\n        this.moveX = this.initialMoveX - this.element.offsetWidth * (this.scale - 1) / 2;\n        this.moveY = this.initialMoveY - this.element.offsetHeight * (this.scale - 1) / 2;\n      }\n      this.centeringImage();\n      this.updateInitialValues();\n      this.transformElement(this.properties.transitionDuration);\n    } else {\n      this.resetScale();\n    }\n  }\n  setZoom(properties) {\n    this.scale = properties.scale;\n    let xCenter;\n    let yCenter;\n    let visibleAreaWidth = this.element.offsetWidth;\n    let visibleAreaHeight = this.element.offsetHeight;\n    let scalingPercent = visibleAreaWidth * this.scale / (visibleAreaWidth * this.initialScale);\n    if (properties.center) {\n      xCenter = properties.center[0];\n      yCenter = properties.center[1];\n    } else {\n      xCenter = visibleAreaWidth / 2 - this.initialMoveX;\n      yCenter = visibleAreaHeight / 2 - this.initialMoveY;\n    }\n    this.moveX = this.initialMoveX - (scalingPercent * xCenter - xCenter);\n    this.moveY = this.initialMoveY - (scalingPercent * yCenter - yCenter);\n    this.centeringImage();\n    this.updateInitialValues();\n    this.transformElement(this.properties.transitionDuration);\n  }\n  alignImage() {\n    const isMoveChanged = this.centeringImage();\n    if (isMoveChanged) {\n      this.updateInitialValues();\n      this.transformElement(this.properties.transitionDuration);\n    }\n  }\n  destroy() {\n    this.removeBasicStyles();\n    this.touches.destroy();\n  }\n  getPropertiesValue(propertyName) {\n    if (this.properties && this.properties[propertyName]) {\n      return this.properties[propertyName];\n    } else {\n      return defaultProperties[propertyName];\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["Touches","defaultProperties","IvyPinch","constructor","properties","event","touches","addEventListeners","getElementPosition","eventType","undefined","getTouchstartPosition","type","i","draggingMode","scale","autoZoomOut","minPanScale","alignImage","updateInitialValues","length","removeEventListeners","disablePan","preventDefault","clientX","clientY","getClientPosition","startX","elementPosition","left","startY","top","moveX","initialMoveX","moveLeft","moveY","initialMoveY","moveTop","limitPan","limitPanY","limitPanX","centeringImage","transformElement","toggleZoom","initialDistance","getDistance","moveLeft0","moveLeft1","moveTop0","moveTop1","moveXC","moveYC","distance","initialScale","handleLimitZoom","wheelZoomFactor","zoomFactor","deltaY","newScale","maxScale","xCenter","yCenter","setZoom","center","_event","setAutoHeight","element","elementTarget","querySelector","tagName","parentElement","Object","assign","detectLimitZoom","listeners","resize","autoHeight","mouseListeners","setBasicStyles","on","handleTouchstart","handleTouchend","handlePan","handlePinch","wheel","handleWheel","doubleTap","handleDoubleTap","handleResize","getPropertiesValue","fullImage","limitZoom","minScale","imageWidth","getImageWidth","imageHeight","getImageHeight","enlargedImageWidth","enlargedImageHeight","moveXRatio","moveYRatio","newImageWidth","newImageHeight","Math","abs","index","img","getElementsByTagName","offsetWidth","imgHeight","scaledImgHeight","parentHeight","offsetHeight","elementHeight","imgOffsetTop","imgWidth","scaledImgWidth","parentWidth","elementWidth","imgOffsetLeft","style","display","alignItems","justifyContent","transformOrigin","setImageSize","setDraggableImage","removeBasicStyles","removeImageSize","removeDraggableImage","imgElement","getImageElement","draggable","draggableImage","maxWidth","maxHeight","imgNaturalWidth","getAttribute","imgNaturalHeight","sizeRatio","getBoundingClientRect","resetScale","transitionDuration","sqrt","pow","pageX","pageY","duration","transition","transform","Number","isTouchScreen","prefixes","split","window","query","join","getMatchMedia","matchMedia","matches","isDragging","defaultMaxScale","pollLimitZoomForOriginalImage","poll","setInterval","maxScaleForOriginalImage","getMaxScaleForOriginalImage","clearInterval","naturalWidth","changedTouches","doubleTapScale","zoomControlScale","visibleAreaWidth","visibleAreaHeight","scalingPercent","isMoveChanged","destroy","propertyName"],"sourceRoot":"","sources":["C:\\MobileApp\\ngx-pinch-zoom\\projects\\ngx-pinch-zoom\\src\\lib\\ivypinch.ts"],"sourcesContent":["import {Touches} from './touches';\r\nimport {Properties} from './interfaces';\r\nimport {defaultProperties} from './properties';\r\n\r\ntype PropertyName = keyof Properties;\r\n\r\nexport class IvyPinch {\r\n    properties: Properties = defaultProperties;\r\n    touches: any;\r\n    element: any;\r\n    elementTarget: any;\r\n    parentElement: any;\r\n    i: number = 0;\r\n    public scale: number = 1;\r\n    initialScale: number = 1;\r\n    elementPosition: any;\r\n    eventType: any;\r\n    startX: number = 0;\r\n    startY: number = 0;\r\n    moveX: number = 0;\r\n    moveY: number = 0;\r\n    initialMoveX: number = 0;\r\n    initialMoveY: number = 0;\r\n    moveXC: number = 0;\r\n    moveYC: number = 0;\r\n    lastTap: number = 0;\r\n    draggingMode: boolean = false;\r\n    distance: number = 0;\r\n    doubleTapTimeout: number = 0;\r\n    initialDistance: number = 0;\r\n    events: any = {};\r\n    maxScale!: number;\r\n    defaultMaxScale: number = 3;\r\n\r\n    // Minimum scale at which panning works\r\n    get minPanScale() {\r\n        return this.getPropertiesValue(\"minPanScale\");\r\n    }\r\n\r\n    get fullImage() {\r\n        return this.properties.fullImage;\r\n    }\r\n\r\n    constructor(properties: any) {\r\n        this.element = properties.element;\r\n\r\n        if (!this.element) {\r\n            return;\r\n        }\r\n\r\n        this.elementTarget = this.element.querySelector('*').tagName;\r\n        this.parentElement = this.element.parentElement;\r\n        this.properties = Object.assign({}, defaultProperties, properties);\r\n        this.detectLimitZoom();\r\n\r\n        this.touches = new Touches({\r\n            element: properties.element,\r\n            listeners: properties.listeners,\r\n            resize: properties.autoHeight,\r\n            mouseListeners: {\r\n                \"mousedown\": \"handleMousedown\",\r\n                \"mouseup\": \"handleMouseup\",\r\n                \"wheel\": \"handleWheel\"\r\n            }\r\n        });\r\n\r\n\r\n        /* Init */\r\n        this.setBasicStyles();\r\n\r\n        /*\r\n         * Listeners\r\n         */\r\n\r\n        this.touches.on('touchstart', this.handleTouchstart);\r\n        this.touches.on('touchend', this.handleTouchend);\r\n        this.touches.on('mousedown', this.handleTouchstart);\r\n        this.touches.on('mouseup', this.handleTouchend);\r\n        this.touches.on('pan', this.handlePan);\r\n        this.touches.on('mousemove', this.handlePan);\r\n        this.touches.on('pinch', this.handlePinch);\r\n\r\n        if (this.properties.wheel) {\r\n            this.touches.on('wheel', this.handleWheel);\r\n        }\r\n\r\n        if (this.properties.doubleTap) {\r\n            this.touches.on('double-tap', this.handleDoubleTap);\r\n        }\r\n\r\n        if (this.properties.autoHeight) {\r\n            this.touches.on('resize', this.handleResize);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\r\n        this.getElementPosition();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n\r\n        /* touchend */\r\n        if (event.type === \"touchend\") {\r\n            this.i = 0;\r\n            this.draggingMode = false;\r\n            const touches = event.touches;\r\n\r\n            // Min scale\r\n            if (this.scale < 1) {\r\n                this.scale = 1;\r\n            }\r\n\r\n            // Auto Zoom Out\r\n            if (this.properties.autoZoomOut && this.eventType === 'pinch') {\r\n                this.scale = 1;\r\n            }\r\n\r\n            // Align image\r\n            if (this.eventType === 'pinch' || \r\n                this.eventType === 'pan' && this.scale > this.minPanScale) {\r\n\r\n                this.alignImage();\r\n            }\r\n\r\n            // Update initial values\r\n            if (this.eventType === 'pinch' ||\r\n                this.eventType === 'pan' ||\r\n                this.eventType === 'horizontal-swipe' ||\r\n                this.eventType === 'vertical-swipe') {\r\n\r\n                this.updateInitialValues();\r\n            }\r\n\r\n            this.eventType = 'touchend';\r\n\r\n            if (touches && touches.length === 0) {\r\n                this.eventType = undefined;\r\n            }\r\n        }\r\n\r\n        /* mouseup */\r\n        if (event.type === \"mouseup\") {\r\n            this.draggingMode = false;\r\n            this.updateInitialValues();\r\n            this.eventType = undefined;\r\n        }\r\n\r\n        this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\r\n    }\r\n\r\n\r\n    /*\r\n     * Handlers\r\n     */\r\n\r\n    handlePan = (event: any) => {\r\n        if (this.scale < this.minPanScale || this.properties.disablePan) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        const {\r\n            clientX,\r\n            clientY\r\n        } = this.getClientPosition(event);\r\n\r\n        if (!this.eventType) {\r\n            this.startX = clientX - this.elementPosition.left;\r\n            this.startY = clientY - this.elementPosition.top;\r\n        }\r\n\r\n        this.eventType = 'pan';\r\n        this.moveX = this.initialMoveX + (this.moveLeft(event, 0) - this.startX);\r\n        this.moveY = this.initialMoveY + (this.moveTop(event, 0) - this.startY);\r\n\r\n        if (this.properties.limitPan) {\r\n            this.limitPanY();\r\n            this.limitPanX();\r\n        }\r\n\r\n        /* mousemove */\r\n        if (event.type === \"mousemove\" && this.scale > this.minPanScale) {\r\n            this.centeringImage();\r\n        }\r\n\r\n        this.transformElement(0);\r\n    }\r\n\r\n    handleDoubleTap = (event: any) => {\r\n        this.toggleZoom(event);\r\n        return;\r\n    }\r\n\r\n    handlePinch = (event: any) => {\r\n        event.preventDefault();\r\n\r\n        if (this.eventType === undefined || this.eventType === 'pinch') {\r\n            const touches = event.touches;\r\n\r\n            if (!this.eventType) {\r\n                this.initialDistance = this.getDistance(touches);\r\n\r\n                const moveLeft0 = this.moveLeft(event, 0);\r\n                const moveLeft1 = this.moveLeft(event, 1);\r\n                const moveTop0 = this.moveTop(event, 0);\r\n                const moveTop1 = this.moveTop(event, 1);\r\n\r\n                this.moveXC = ((moveLeft0 + moveLeft1) / 2) - this.initialMoveX;\r\n                this.moveYC = ((moveTop0 + moveTop1) / 2) - this.initialMoveY;\r\n            }\r\n\r\n            this.eventType = 'pinch';\r\n            this.distance = this.getDistance(touches);\r\n            this.scale = this.initialScale * (this.distance / this.initialDistance);\r\n            this.moveX = this.initialMoveX - (((this.distance / this.initialDistance) * this.moveXC) - this.moveXC);\r\n            this.moveY = this.initialMoveY - (((this.distance / this.initialDistance) * this.moveYC) - this.moveYC);\r\n\r\n            this.handleLimitZoom();\r\n\r\n            if (this.properties.limitPan) {\r\n                this.limitPanY();\r\n                this.limitPanX();\r\n            }\r\n\r\n            this.transformElement(0);\r\n        }\r\n    }\r\n\r\n\r\n    handleWheel = (event: any) => {\r\n        event.preventDefault();\r\n\r\n        let wheelZoomFactor = this.properties.wheelZoomFactor || 0;\r\n        let zoomFactor = event.deltaY < 0 ? (wheelZoomFactor) : (- wheelZoomFactor);\r\n        let newScale = this.initialScale + zoomFactor;\r\n\r\n        /* Round value */\r\n        if (newScale < (1 + wheelZoomFactor)) {\r\n            newScale = 1;\r\n        } else if (newScale < this.maxScale && newScale > this.maxScale - wheelZoomFactor) {\r\n            newScale = this.maxScale;\r\n        }\r\n\r\n        if (newScale < 1 || newScale > this.maxScale) {\r\n            return;\r\n        }\r\n\r\n        if (newScale === this.scale) {\r\n            return;\r\n        }\r\n\r\n        this.getElementPosition();\r\n        this.scale = newScale;\r\n\r\n        /* Get cursor position over image */\r\n        let xCenter = (event.clientX - this.elementPosition.left) - this.initialMoveX;\r\n        let yCenter = (event.clientY - this.elementPosition.top) - this.initialMoveY;\r\n\r\n        this.setZoom({\r\n            scale: newScale,\r\n            center: [xCenter, yCenter]\r\n        });\r\n    }\r\n\r\n    handleResize = (_event: any) => {\r\n        this.setAutoHeight();\r\n    }\r\n\r\n    handleLimitZoom() {\r\n        const limitZoom = this.maxScale;\r\n        const minScale = this.properties.minScale || 0;\r\n\r\n        if (this.scale > limitZoom || this.scale <= minScale) {\r\n            const imageWidth = this.getImageWidth();\r\n            const imageHeight = this.getImageHeight();\r\n            const enlargedImageWidth = imageWidth * this.scale;\r\n            const enlargedImageHeight = imageHeight * this.scale;\r\n            const moveXRatio = this.moveX / (enlargedImageWidth - imageWidth);\r\n            const moveYRatio = this.moveY / (enlargedImageHeight - imageHeight);\r\n\r\n            if (this.scale > limitZoom) {\r\n                this.scale = limitZoom;\r\n            }\r\n\r\n            if (this.scale <= minScale) {\r\n                this.scale = minScale;\r\n            }\r\n\r\n            const newImageWidth = imageWidth * this.scale;\r\n            const newImageHeight = imageHeight * this.scale;\r\n\r\n            this.moveX = -Math.abs((moveXRatio * (newImageWidth - imageWidth)));\r\n            this.moveY = -Math.abs((-moveYRatio * (newImageHeight - imageHeight)));\r\n        }\r\n    }\r\n\r\n    moveLeft(event: any, index: number = 0) {\r\n        const clientX = this.getClientPosition(event, index).clientX;\r\n        return clientX - this.elementPosition.left;\r\n    }\r\n\r\n    moveTop(event: any, index: number = 0) {\r\n        const clientY = this.getClientPosition(event, index).clientY;\r\n        return clientY - this.elementPosition.top;\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    centeringImage() {\r\n        const img = this.element.getElementsByTagName(this.elementTarget)[0];\r\n        const initialMoveX = this.moveX;\r\n        const initialMoveY = this.moveY;\r\n\r\n        if (this.moveY > 0) {\r\n            this.moveY = 0;\r\n        }\r\n        if (this.moveX > 0) {\r\n            this.moveX = 0;\r\n        }\r\n\r\n        if (img) {\r\n            this.limitPanY();\r\n            this.limitPanX();\r\n        }\r\n        if (img && this.scale < 1) {\r\n            if (this.moveX < this.element.offsetWidth * (1 - this.scale)) {\r\n                this.moveX = this.element.offsetWidth * (1 - this.scale);\r\n            }\r\n        }\r\n\r\n        return initialMoveX !== this.moveX || initialMoveY !== this.moveY;\r\n    }\r\n\r\n    limitPanY() {\r\n        const imgHeight = this.getImageHeight();\r\n        const scaledImgHeight = imgHeight * this.scale;\r\n        const parentHeight = this.parentElement.offsetHeight;\r\n        const elementHeight = this.element.offsetHeight;\r\n\r\n        if (scaledImgHeight < parentHeight) {\r\n            this.moveY = (parentHeight - elementHeight * this.scale) / 2;\r\n        } else {\r\n            const imgOffsetTop = ((imgHeight - elementHeight) * this.scale) / 2;\r\n\r\n            if (this.moveY > imgOffsetTop) {\r\n                this.moveY = imgOffsetTop;\r\n            } else if ((scaledImgHeight + Math.abs(imgOffsetTop) - parentHeight) + this.moveY < 0) {\r\n                this.moveY = -(scaledImgHeight + Math.abs(imgOffsetTop) - parentHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    limitPanX() {\r\n        const imgWidth = this.getImageWidth();\r\n        const scaledImgWidth = imgWidth * this.scale;\r\n        const parentWidth = this.parentElement.offsetWidth;\r\n        const elementWidth = this.element.offsetWidth;\r\n\r\n        if (scaledImgWidth < parentWidth) {\r\n            this.moveX = (parentWidth - elementWidth * this.scale) / 2;\r\n        } else {\r\n            const imgOffsetLeft = ((imgWidth - elementWidth) * this.scale) / 2;\r\n\r\n            if (this.moveX > imgOffsetLeft) {\r\n                this.moveX = imgOffsetLeft;\r\n            } else if ((scaledImgWidth + Math.abs(imgOffsetLeft) - parentWidth) + this.moveX < 0) {\r\n                this.moveX = -(imgWidth * this.scale + Math.abs(imgOffsetLeft) - parentWidth);\r\n            }\r\n        }\r\n    }\r\n\r\n    setBasicStyles() {\r\n        this.element.style.display = 'flex';\r\n        this.element.style.alignItems = 'center';\r\n        this.element.style.justifyContent = 'center';\r\n        this.element.style.transformOrigin = '0 0';\r\n        this.setImageSize();\r\n        this.setDraggableImage();\r\n    }\r\n\r\n    removeBasicStyles() {\r\n        this.element.style.display = '';\r\n        this.element.style.alignItems = '';\r\n        this.element.style.justifyContent = '';\r\n        this.element.style.transformOrigin = '';\r\n        this.removeImageSize();\r\n        this.removeDraggableImage();\r\n    }\r\n\r\n    setDraggableImage() {\r\n        const imgElement = this.getImageElement();\r\n\r\n        if (imgElement) {\r\n            imgElement.draggable = this.properties.draggableImage;\r\n        }\r\n    }\r\n\r\n    removeDraggableImage() {\r\n        const imgElement = this.getImageElement();\r\n\r\n        if (imgElement) {\r\n            imgElement.draggable = true;\r\n        }\r\n    }\r\n\r\n    setImageSize() {\r\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\r\n\r\n        if (imgElement.length) {\r\n            imgElement[0].style.maxWidth = '100%';\r\n            imgElement[0].style.maxHeight = '100%';\r\n\r\n            this.setAutoHeight();\r\n        }\r\n    }\r\n\r\n    setAutoHeight() {\r\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\r\n\r\n        if (!this.properties.autoHeight || !imgElement.length) {\r\n            return;\r\n        }\r\n\r\n        const imgNaturalWidth = imgElement[0].getAttribute(\"width\");\r\n        const imgNaturalHeight = imgElement[0].getAttribute(\"height\");\r\n        const sizeRatio = imgNaturalWidth / imgNaturalHeight;\r\n        const parentWidth = this.parentElement.offsetWidth;\r\n\r\n        imgElement[0].style.maxHeight = parentWidth / sizeRatio + \"px\";\r\n    }\r\n\r\n    removeImageSize() {\r\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\r\n\r\n        if (imgElement.length) {\r\n            imgElement[0].style.maxWidth = '';\r\n            imgElement[0].style.maxHeight = '';\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        this.elementPosition = this.element.parentElement.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        const {\r\n            clientX,\r\n            clientY\r\n        } = this.getClientPosition(event);\r\n\r\n        this.startX = clientX - this.elementPosition.left;\r\n        this.startY = clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getClientPosition(event: any, index: number = 0) {\r\n        let clientX;\r\n        let clientY;\r\n\r\n        if (event.type === \"touchstart\" || event.type === \"touchmove\") {\r\n            clientX = event.touches[index].clientX;\r\n            clientY = event.touches[index].clientY;\r\n        }\r\n        if (event.type === \"mousedown\" || event.type === \"mousemove\") {\r\n            clientX = event.clientX;\r\n            clientY = event.clientY;\r\n        }\r\n\r\n        return {\r\n            clientX,\r\n            clientY\r\n        };\r\n    }\r\n\r\n    resetScale() {\r\n        this.scale = 1;\r\n        this.moveX = 0;\r\n        this.moveY = 0;\r\n        this.updateInitialValues();\r\n        this.transformElement(this.properties.transitionDuration);\r\n    }\r\n\r\n    updateInitialValues() {\r\n        this.initialScale = this.scale;\r\n        this.initialMoveX = this.moveX;\r\n        this.initialMoveY = this.moveY;\r\n    }\r\n\r\n    getDistance(touches: any) {\r\n        return Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2));\r\n    }\r\n\r\n    getImageHeight() {\r\n        const img = this.element.getElementsByTagName(this.elementTarget)[0];\r\n        return img.offsetHeight;\r\n    }\r\n\r\n    getImageWidth() {\r\n        const img = this.element.getElementsByTagName(this.elementTarget)[0];\r\n        return img.offsetWidth;\r\n    }\r\n\r\n    transformElement(duration: any) {\r\n        this.element.style.transition = \"all \" + duration + \"ms\";\r\n        this.element.style.transform = \"matrix(\" + Number(this.scale) + \", 0, 0, \" + Number(this.scale) + \", \" + Number(this.moveX) + \", \" + Number(this.moveY) + \")\";\r\n    }\r\n\r\n    isTouchScreen() {\r\n        const prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        const query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return this.getMatchMedia(query);\r\n    }\r\n\r\n    getMatchMedia(query: any) {\r\n        return window.matchMedia(query).matches;\r\n    }\r\n\r\n    isDragging() {\r\n        if (this.properties.disablePan) {\r\n            return false;\r\n        }\r\n\r\n        const imgHeight = this.getImageHeight();\r\n        const imgWidth = this.getImageWidth();\r\n\r\n        if (this.scale > 1) {\r\n            return imgHeight * this.scale > this.parentElement.offsetHeight ||\r\n                imgWidth * this.scale > this.parentElement.offsetWidth;\r\n        }\r\n        if (this.scale === 1) {\r\n            return imgHeight > this.parentElement.offsetHeight ||\r\n                imgWidth > this.parentElement.offsetWidth;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    detectLimitZoom() {\r\n        this.maxScale = this.defaultMaxScale;\r\n\r\n        if (this.properties.limitZoom === \"original image size\" &&\r\n            this.elementTarget === \"IMG\") {\r\n            // We are waiting for the element with the image to be available\r\n            this.pollLimitZoomForOriginalImage();\r\n        }\r\n    }\r\n\r\n    pollLimitZoomForOriginalImage() {\r\n        let poll = setInterval(() => {\r\n            let maxScaleForOriginalImage = this.getMaxScaleForOriginalImage();\r\n            if (typeof maxScaleForOriginalImage === 'number') {\r\n                this.maxScale = maxScaleForOriginalImage;\r\n                clearInterval(poll);\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    getMaxScaleForOriginalImage() {\r\n        let maxScale!:number;\r\n        let img = this.element.getElementsByTagName(\"img\")[0];\r\n\r\n        if (img.naturalWidth && img.offsetWidth) {\r\n            maxScale = img.naturalWidth / img.offsetWidth;\r\n        }\r\n\r\n        return maxScale;\r\n    }\r\n\r\n    getImageElement() {\r\n        const imgElement = this.element.getElementsByTagName(this.elementTarget);\r\n\r\n        if (imgElement.length) {\r\n            return imgElement[0];\r\n        }\r\n    }\r\n\r\n    toggleZoom(event: any = false) {\r\n        if (this.initialScale === 1) {\r\n            if (event && event.changedTouches) {\r\n                if (this.properties.doubleTapScale === undefined) {\r\n                    return;\r\n                }\r\n\r\n                const changedTouches = event.changedTouches;\r\n                this.scale = this.initialScale * this.properties.doubleTapScale;\r\n                this.moveX = this.initialMoveX - (changedTouches[0].clientX - this.elementPosition.left) * (this.properties.doubleTapScale - 1);\r\n                this.moveY = this.initialMoveY - (changedTouches[0].clientY - this.elementPosition.top) * (this.properties.doubleTapScale - 1);\r\n            } else {\r\n                let zoomControlScale = this.properties.zoomControlScale || 0;\r\n                this.scale = this.initialScale * (zoomControlScale + 1);\r\n                this.moveX = this.initialMoveX - this.element.offsetWidth * (this.scale - 1) / 2;\r\n                this.moveY = this.initialMoveY - this.element.offsetHeight * (this.scale - 1) / 2;\r\n            }\r\n\r\n            this.centeringImage();\r\n            this.updateInitialValues();\r\n            this.transformElement(this.properties.transitionDuration);\r\n        } else {\r\n            this.resetScale();\r\n        }\r\n    }\r\n\r\n    setZoom(properties: {\r\n        scale: number,\r\n        center?: number[]\r\n    }) {\r\n        this.scale = properties.scale;\r\n\r\n        let xCenter;\r\n        let yCenter;\r\n        let visibleAreaWidth = this.element.offsetWidth;\r\n        let visibleAreaHeight = this.element.offsetHeight;\r\n        let scalingPercent = (visibleAreaWidth * this.scale) / (visibleAreaWidth * this.initialScale);\r\n\r\n        if (properties.center) {\r\n            xCenter = properties.center[0];\r\n            yCenter = properties.center[1];\r\n        } else {\r\n            xCenter = visibleAreaWidth / 2 - this.initialMoveX;\r\n            yCenter = visibleAreaHeight / 2 - this.initialMoveY;\r\n        }\r\n\r\n        this.moveX = this.initialMoveX - ((scalingPercent * xCenter) - xCenter);\r\n        this.moveY = this.initialMoveY - ((scalingPercent * yCenter) - yCenter);\r\n\r\n        this.centeringImage();\r\n        this.updateInitialValues();\r\n        this.transformElement(this.properties.transitionDuration);\r\n    }\r\n\r\n    alignImage() {\r\n        const isMoveChanged = this.centeringImage();\r\n\r\n        if (isMoveChanged) {\r\n            this.updateInitialValues();\r\n            this.transformElement(this.properties.transitionDuration);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.removeBasicStyles();\r\n        this.touches.destroy();\r\n    }\r\n\r\n    getPropertiesValue(propertyName:PropertyName) {\r\n        if (this.properties && this.properties[propertyName]) {\r\n            return this.properties[propertyName]\r\n        } else {\r\n            return defaultProperties[propertyName];\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}